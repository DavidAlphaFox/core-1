#if INTERACTIVE
#r "nuget: FAKE.Core"
#r "nuget: Fake.Core.Target"
#r "nuget: Fake.IO.FileSystem"
#r "nuget: Fake.Tools.Git"
#r "nuget: Fake.DotNet.Cli"
#r "nuget: Fake.DotNet.AssemblyInfoFile"
#r "nuget: Fake.DotNet.Paket"
#r "nuget: Paket.Core"
#else
#r "paket:
nuget FSharp.Core 5.0.0
nuget FAKE.Core
nuget Fake.Core.Target
nuget Fake.IO.FileSystem
nuget Fake.Tools.Git
nuget Fake.DotNet.Cli
nuget Fake.DotNet.AssemblyInfoFile
nuget Fake.DotNet.Paket
nuget Paket.Core prerelease //"
#endif

#load "paket-files/wsbuild/github.com/dotnet-websharper/build-script/WebSharper.Fake.fsx"

#r "System.Xml.Linq"

#if INTERACTIVE
#r "nuget: NUglify"
#else
#r "paket:
nuget NUglify //"
#endif

open System.IO
open System.Diagnostics
open System.Xml
open System.Xml.Linq
open System.Xml.XPath
open Fake.Core
open Fake.Core.TargetOperators
open Fake.DotNet
open Fake.IO
open Fake.IO.FileSystemOperators
open WebSharper.Fake
open System.Diagnostics

let version = "6.0"
let pre = None

let baseVersion =
    version + match pre with None -> "" | Some x -> "-" + x
    |> Paket.SemVer.Parse

let publish rids (mode: BuildMode) =
    let publishExe (mode: BuildMode) fw input output explicitlyCopyFsCore =
        for rid in rids do
            let outputPath =
                __SOURCE_DIRECTORY__ </> "build" </> string mode </> output </> fw </> (rid |> Option.defaultValue "") </> "deploy"
            DotNet.publish (fun p ->
                { p with
                    Framework = Some fw
                    OutputPath = Some outputPath
                    NoRestore = true
                    SelfContained = false |> Some
                    Runtime = rid
                    Configuration = mode.AsDotNet
                }) input
            if explicitlyCopyFsCore then
                let fsharpCoreLib = __SOURCE_DIRECTORY__ </> "packages/includes/FSharp.Core/lib/netstandard2.0"
                [ 
                    fsharpCoreLib </> "FSharp.Core.dll" 
                ] 
                |> Shell.copy outputPath                
    publishExe mode "net6.0" "src/compiler/WebSharper.FSharp/WebSharper.FSharp.fsproj" "FSharp" true
    publishExe mode "net6.0" "src/compiler/WebSharper.FSharp.Service/WebSharper.FSharp.Service.fsproj" "FSharp" true
    publishExe mode "net6.0" "src/compiler/WebSharper.CSharp/WebSharper.CSharp.fsproj" "CSharp" true

let prepareCompiler (mode: BuildMode) =
    // make netstandardtypes.txt
    let f = FileInfo("src/compiler/WebSharper.Core/netstandardtypes.txt")
    if not f.Exists then
        let asm =
            "packages/includes/NETStandard.Library.Ref/ref/netstandard2.1/netstandard.dll"
            |> Mono.Cecil.AssemblyDefinition.ReadAssembly
        use s = f.OpenWrite()
        use w = new StreamWriter(s)
        w.WriteLine(asm.FullName)
        let rec writeType (t: Mono.Cecil.TypeDefinition) =
            w.WriteLine(t.FullName.Replace('/', '+'))
            Seq.iter writeType t.NestedTypes
        Seq.iter writeType asm.MainModule.Types

    // make msbuild/AssemblyInfo.fs
    let lockFile =
        Paket.LockFile.LoadFrom(__SOURCE_DIRECTORY__ </> "paket.lock")
    let roslynVersion = 
        lockFile
            .GetGroup(Paket.Domain.GroupName "main")
            .GetPackage(Paket.Domain.PackageName "Microsoft.CodeAnalysis.CSharp")
            .Version.AsString
    let fcsVersion = 
        lockFile
            .GetGroup(Paket.Domain.GroupName "fcs")
            .GetPackage(Paket.Domain.PackageName "FSharp.Compiler.Service")
            .Version.AsString
    let inFile = "build/AssemblyInfo.fs" // Generated by WS-GenAssemblyInfo
    let outFile = "msbuild/AssemblyInfo.fs"
    let t =
        String.concat "\r\n" [
            yield File.ReadAllText(inFile)
            yield sprintf "    let [<Literal>] FcsVersion = \"%s\"" fcsVersion
            yield sprintf "    let [<Literal>] RoslynVersion = \"%s\"" roslynVersion
        ]
    if not (File.Exists(outFile) && t = File.ReadAllText(outFile)) then
        File.WriteAllText(outFile, t)

let prepareMain (mode: BuildMode) =
    let needsBuilding input output =
        let i = FileInfo(input)
        let o = FileInfo(output)
        not o.Exists || o.LastWriteTimeUtc < i.LastWriteTimeUtc
    let minify (path: string) =
        let out = Path.ChangeExtension(path, ".min.js")
        if needsBuilding path out then
            let raw = File.ReadAllText(path)
            let mjs = NUglify.Uglify.Js(raw).Code
            File.WriteAllText(Path.ChangeExtension(path, ".min.js"), mjs)
            stdout.WriteLine("Written {0}", out)
    minify "src/compiler/WebSharper.Core.JavaScript/Runtime.js"
    minify "src/stdlib/WebSharper.Main/Json.js"
    minify "src/stdlib/WebSharper.Main/AnimFrame.js"

let targets = MakeTargets {
    WSTargets.Default (fun () -> ComputeVersion (Some baseVersion)) with
        HasDefaultBuild = false
        BuildAction =
            BuildAction.Multiple [
                BuildAction.Custom prepareCompiler
                BuildAction.Projects ["WebSharper.Compiler.sln"]
                BuildAction.Custom (publish [ None; Some "win-x64"; Some "linux-x64"; Some "linux-musl-x64" ])
                BuildAction.Custom prepareMain
                BuildAction.Projects ["WebSharper.sln"]
            ]
}

Target.create "Build" <| fun o ->
    BuildAction.Multiple [
        BuildAction.Custom prepareCompiler
        BuildAction.Projects ["WebSharper.Compiler.NoTests.sln"]
    ]
    |> build o (buildModeFromFlag o) 

"WS-GenAssemblyInfo"
    ==> "Build"

Target.create "Publish" <| fun o ->
    publish [ None ] (buildModeFromFlag o)  

Target.create "Tests" <| fun o ->
    BuildAction.Multiple [
        BuildAction.Custom prepareCompiler
        BuildAction.Projects ["WebSharper.Compiler.sln"]
    ]
    |> build o (buildModeFromFlag o) 

"WS-GenAssemblyInfo"
    ==> "Tests"
    
Target.create "BuildAll" <| fun o ->
    BuildAction.Multiple [
        BuildAction.Custom prepareCompiler
        BuildAction.Projects ["WebSharper.Compiler.NoTests.sln"]
        //BuildAction.Custom publish
        BuildAction.Custom prepareMain
        BuildAction.Projects ["WebSharper.NoTests.sln"]
    ]
    |> build o (buildModeFromFlag o) 

"WS-GenAssemblyInfo"
    ==> "BuildAll"

Target.create "AllTests" <| fun o ->
   BuildAction.Multiple [
       BuildAction.Custom prepareCompiler
       BuildAction.Projects ["WebSharper.Compiler.sln"]
       //BuildAction.Custom publish
       BuildAction.Custom prepareMain
       BuildAction.Projects ["WebSharper.sln"]
   ]
   |> build o (buildModeFromFlag o)

"WS-GenAssemblyInfo"
    ==> "AllTests"

Target.create "RunCompilerTestsRelease" <| fun _ ->
    DotNet.test (fun t ->
        { t with
            NoRestore = true
            Configuration = DotNet.BuildConfiguration.Release
        }
    ) "tests/WebSharper.FSharp/WebSharper.FSharp.Tests.fsproj"

"WS-BuildRelease"
    ?=> "RunCompilerTestsRelease"
    ?=> "WS-Package"

"RunCompilerTestsRelease"
    ==> "CI-Release"

Target.create "RunMainTestsRelease" <| fun _ ->
    Trace.log "Starting Web test project"
    let mutable startedOk = false
    let started = Event<unit>()

    use webTestsProc = new Process()
    webTestsProc.StartInfo.FileName <- @"build\Release\Tests\net6.0\Web.exe"
    webTestsProc.StartInfo.WorkingDirectory <- @"tests\Web"
    webTestsProc.StartInfo.UseShellExecute <- false
    webTestsProc.StartInfo.RedirectStandardOutput <- true
    
    webTestsProc.OutputDataReceived.Add(fun d -> 
        if not (isNull d) then
            if not startedOk then            
                Trace.log d.Data
            if d.Data.Contains("Application started.") then
                startedOk <- true   
                started.Trigger()
    )
    webTestsProc.Exited.Add(fun _ -> 
        if not startedOk then
            failwith "Starting Web test project failed."    
    )

    webTestsProc.Start()
    webTestsProc.BeginOutputReadLine()
    started.Publish |> Async.AwaitEvent |> Async.RunSynchronously

    let res =
        Shell.Exec(
            "packages/test/Chutzpah/tools/chutzpah.console.exe", 
            "http://localhost:5000/consoletests /engine Chrome /silent /failOnError /showFailureReport"
        )
    webTestsProc.Kill()
    if res <> 0 then
        failwith "Chutzpah test run failed"

"WS-BuildRelease"
    ?=> "RunMainTestsRelease"
    ?=> "WS-Package"

"RunMainTestsRelease"
    ==> "CI-Release"
    
Target.runOrDefaultWithArguments "Build"
